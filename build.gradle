import durbin.util.*
RunBash.enable()

/* 
Per state files:
./scripts/extractStateFiles.gv domainAverage_all.tab

Correlation jobs were made thus:
/cluster/bin/wekaMine/wmCorrelateAllPairs -d /hive/users/james/wmm/epigenome/domainAverage_all.tab -o /hive/users/james/wmm/epigenome/allpairs_correlation/domains --k 100 > pearsonjobs.txt

*/

// Add classes used by the build script, basically durbinlib utilities like RunBash

buildscript {
    dependencies {
		classpath fileTree(dir: '/cluster/bin/durbinlib//target/jar/', include: '*.jar')
    }
}

/**********************************************************
*						TASKS
*/


// KJD ERROR LOOK INTO: ./rawcluster/ZNF/Rpts
task combineCorrelationFiles<<{
	new File("statekey.tab").splitEachLine("\t"){fields->
		def name = fields[1]
		"combinetables -o ./rawcluster/${name}_all.tab ./rawcluster/${name}_*".bash()
	}

}


task makeCorrelationJobs<<{
	def datadir = "/hive/users/james/wmm/epigenome/eachstate"
	new File(datadir).eachFile{statefile->
		def cmd = "/cluster/bin/wekaMine/wmCorrelateAllPairs"
		def datafile = "$datadir/${statefile.name}"
		def fullcmd = "$cmd -d $datafile -o /hive/users/james/wmm/epigenome/rawcluster/${statefile.name}_ -P -k 500 >> jobs.list"
		println fullcmd
		fullcmd.bash()
	}	
}


// Cluster jobs to compute average of each of 15 HMM states over 
// the ~3000 domains.  Each job takes about 15 minutes to complete. 
task makeMetadataJobs<<{
	def datadir = "/hive/users/james/wmm/epigenome/data/coreMarks/"
	new File(datadir).eachFile{hmmCallBed->
		def fields = hmmCallBed.name.split("_")
		def sampleID = fields[0]
		def cmd = "/hive/users/james/wmm/epigenome/scripts/makeMetadataFileFaster"
		def domains = "/hive/users/james/wmm/epigenome/domains_hesc/combined/total.combined.domain"
		def output = "/hive/users/james/wmm/epigenome/raw_wrangle/${sampleID}.tab"
		println "${cmd} $domains $hmmCallBed $output"
	}
}

// Each makeMetadataFile job creates a file with one column for one sample. 
// This task combines all of these one column files into a feature by samples
// table. 
task combineRawWrangle<<{
	def t = new DynamicTable()
	def wrangleDir = "raw_wrangle/"
	new File(wrangleDir).eachFile{oneSample->
		def colName = oneSample.name
		colName = colName.replaceAll(".tab","")  // chop off .tab suffix. 
		println "Adding $colName"
		oneSample.withReader{r->
			r.splitEachLine("\t"){fields->
				def rowName = fields[0]
				def value = fields[1]
				t[rowName][colName] = value
			}
		}
	}
	println "Writing domainAverage_all.tab ..."
	t.write("domainAverage_all.tab","\t")
}
